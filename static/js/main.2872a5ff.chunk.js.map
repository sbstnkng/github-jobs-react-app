{"version":3,"sources":["useFetchobs.js","components/job/index.js","components/job/Job.js","components/pagination/index.js","components/pagination/JobsPagination.js","components/searchform/index.js","components/searchform/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","BASE_URL","CORS_ANYWHERE","reducer","state","action","type","payload","loading","jobs","error","hasNextPage","useFetchJobs","params","page","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","source","get","headers","cancelToken","token","markdown","then","res","data","catch","e","isCancel","cancelToken2","length","cancel","Job","job","useState","open","setOpen","title","company","created_at","location","how_to_apply","company_logo","description","Card","className","Body","Title","Subtitle","Date","toLocaleDateString","Badge","variant","style","wordBreak","height","alt","src","Text","Button","onClick","prevOpen","Collapse","in","JobsPagination","setPage","adjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","full_time","id","label","App","setParams","Container","data-testid","param","target","prevParams","map","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2872a5ff.chunk.js","sourcesContent":["import { useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ACTIONS = {\n  MAKE_REQUEST: 'make-request',\n  GET_DATA: 'get-data',\n  ERROR: 'error',\n  UPDATE_HAS_NEXT_PAGE: 'update-has-next-page',\n};\n\nconst CORS_ANYWHERE = 'https://cors-anywhere.herokuapp.com/';\nconst BASE_URL = CORS_ANYWHERE + 'https://jobs.github.com/positions.json';\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case ACTIONS.MAKE_REQUEST:\n      return { loading: true, jobs: [] };\n    case ACTIONS.GET_DATA:\n      return { ...state, loading: false, jobs: payload.jobs };\n    case ACTIONS.ERROR:\n      return { ...state, loading: false, error: action.payload.error, jobs: [] };\n    case ACTIONS.UPDATE_HAS_NEXT_PAGE:\n      return { ...state, hasNextPage: payload.hasNextPage };\n    default:\n      return state;\n  }\n};\n\nconst useFetchJobs = (params, page) => {\n  const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true });\n\n  useEffect(() => {\n    const cancelToken1 = axios.CancelToken.source();\n    dispatch({ type: ACTIONS.MAKE_REQUEST });\n    axios\n      .get(BASE_URL, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n        },\n        cancelToken: cancelToken1.token,\n        params: { markdown: true, page, ...params },\n      })\n      .then((res) => {\n        dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data } });\n      })\n      .catch((e) => {\n        if (axios.isCancel(e)) return;\n        dispatch({ type: ACTIONS.ERROR, payload: { error: e } });\n      });\n\n    const cancelToken2 = axios.CancelToken.source();\n    axios\n      .get(BASE_URL, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n        },\n        cancelToken: cancelToken2.token,\n        params: { markdown: true, page: page + 1, ...params },\n      })\n      .then((res) => {\n        dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.length !== 0 } });\n      })\n      .catch((e) => {\n        if (axios.isCancel(e)) return;\n        dispatch({ type: ACTIONS.ERROR, payload: { error: e } });\n      });\n\n    return () => {\n      cancelToken1.cancel();\n      cancelToken2.cancel();\n    };\n  }, [params, page]);\n\n  return state;\n};\n\nexport default useFetchJobs;\n","import Job from './Job';\n\nexport default Job;\n","import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport Collapse from 'react-bootstrap/Collapse';\nimport ReactMarkdown from 'react-markdown';\n\nconst Job = ({ job }) => {\n  const [open, setOpen] = useState(false);\n  const { title, company, created_at, type, location, how_to_apply, company_logo, description } = job;\n  return (\n    <Card className=\"mb-3\">\n      <Card.Body>\n        <div className=\"d-flex  justify-content-between\">\n          <div>\n            <Card.Title>\n              {title} - <span className=\"text-muted font-weight-light\">{company}</span>\n            </Card.Title>\n            <Card.Subtitle className=\"text-muted mb-2\">{new Date(created_at).toLocaleDateString()}</Card.Subtitle>\n            <Badge variant=\"secondary\" className=\"mr-2\">\n              {type}\n            </Badge>\n            <Badge variant=\"info\">{location}</Badge>\n            <div style={{ wordBreak: 'break-all' }} className=\"mt-2\">\n              <ReactMarkdown source={how_to_apply} />\n            </div>\n          </div>\n          <img className=\"d-none d-md-block\" height=\"50\" alt={company} src={company_logo} />\n        </div>\n        <Card.Text>\n          <Button onClick={() => setOpen((prevOpen) => !prevOpen)} variant=\"primary\">\n            {open ? 'Hide Details' : 'View Details'}\n          </Button>\n        </Card.Text>\n        <Collapse in={open}>\n          <div className=\"mt-4\">\n            <ReactMarkdown source={description} />\n          </div>\n        </Collapse>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Job;\n","import JobsPagination from './JobsPagination';\n\nexport default JobsPagination;\n","import React from 'react';\nimport Pagination from 'react-bootstrap/Pagination';\n\nconst JobsPagination = ({ page, setPage, hasNextPage }) => {\n  const adjustPage = (amount) => {\n    setPage((prevPage) => prevPage + amount);\n  };\n\n  return (\n    <Pagination>\n      {page !== 1 && <Pagination.Prev onClick={() => adjustPage(-1)} />}\n      {page !== 1 && <Pagination.Item onClick={() => setPage(1)}>1</Pagination.Item>}\n      {page > 2 && <Pagination.Ellipsis />}\n      {page > 2 && <Pagination.Item onClick={() => adjustPage(-1)}>{page - 1}</Pagination.Item>}\n      <Pagination.Item active>{page}</Pagination.Item>\n      {hasNextPage && <Pagination.Item onClick={() => adjustPage(1)}>{page + 1}</Pagination.Item>}\n      {hasNextPage && <Pagination.Next onClick={() => adjustPage(1)} />}\n    </Pagination>\n  );\n};\n\nexport default JobsPagination;\n","import SearchForm from './SearchForm';\n\nexport default SearchForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\n\nconst SearchForm = ({ params, onParamChange }) => {\n  return (\n    <Form className=\"mb-4\">\n      <Form.Row className=\"align-items-end\">\n        <Form.Group as={Col}>\n          <Form.Label>Description</Form.Label>\n          <Form.Control onChange={onParamChange} value={params.description} name=\"description\" type=\"text\" />\n        </Form.Group>\n        <Form.Group as={Col}>\n          <Form.Label>Location</Form.Label>\n          <Form.Control onChange={onParamChange} value={params.location} name=\"location\" type=\"text\" />\n        </Form.Group>\n        <Form.Group as={Col} xs=\"auto\" className=\"ml-2\">\n          <Form.Check\n            onChange={onParamChange}\n            value={params.full_time}\n            name=\"full_time\"\n            id=\"full-time\"\n            label=\"Only Full Time\"\n            type=\"checkbox\"\n            className=\"mb-2\"\n          />\n        </Form.Group>\n      </Form.Row>\n    </Form>\n  );\n};\n\nexport default SearchForm;\n","import React, { useState } from 'react';\nimport useFetchJobs from './useFetchobs';\nimport Container from 'react-bootstrap/Container';\nimport Job from './components/job';\nimport JobsPagination from './components/pagination';\nimport SearchForm from './components/searchform';\n\nconst App = () => {\n  const [params, setParams] = useState({});\n  const [page, setPage] = useState(1);\n  const { jobs, loading, error, hasNextPage } = useFetchJobs(params, page);\n\n  const handleParamChange = (e) => {\n    const param = e.target.name;\n    const value = e.target.value;\n    setPage(1);\n    setParams((prevParams) => {\n      return { ...prevParams, [param]: value };\n    });\n  };\n\n  return (\n    <Container className=\"my-4\">\n      <h1 className=\"mb-4\" data-testid=\"title\">\n        GitHub Jobs\n      </h1>\n      <SearchForm params={params} onParamChange={handleParamChange} />\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n      {loading && <h1>Loading...</h1>}\n      {error && <h1>Error. Try Refreshing.</h1>}\n      {jobs.map((job) => {\n        return <Job key={job.id} job={job} />;\n      })}\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}